Describe gita#normalize
  Before all
    let V = vital#of('vital')
    let Path = V.import('System.Filepath')
  End

  Describe gita#normalize#relpath({git}, {path})
    It returns an unix relative path from a git repository
      let path = Path.abspath(expand('%'))
      let git = gita#core#get()
      let ret = gita#normalize#relpath(git, path)
      Assert Equals(ret, Path.unixpath(Path.relpath(path)))
    End

    It returns an unix relative path from a current working directory
      let path = Path.abspath(expand('%'))
      let git = { 'is_enabled': 0, 'worktree': '' }
      let ret = gita#normalize#relpath(git, path)
      Assert Equals(ret, Path.unixpath(Path.relpath(path)))
    End

    It return {path} if the {path} is already a relative path
      let path = Path.relpath(expand('%'))
      let git = gita#core#get()
      let ret = gita#normalize#relpath(git, path)
      Assert Equals(ret, path)
      Assert Same(ret, path)

      let git = { 'is_enabled': 0, 'worktree': '' }
      let ret = gita#normalize#relpath(git, path)
      Assert Equals(ret, path)
      Assert Same(ret, path)
    End
  End

  Describe gita#normalize#abspath({git}, {path})
    It returns a real absolute path in a git repository
      let path = Path.unixpath(Path.relpath(expand('%')))
      let git = gita#core#get()
      let ret = gita#normalize#abspath(git, path)
      Assert Equals(ret, Path.realpath(Path.abspath(path)))
    End

    It returns a real absolute path in a current working directory
      let path = Path.unixpath(Path.relpath(expand('%')))
      let git = { 'is_enabled': 0, 'worktree': '' }
      let ret = gita#normalize#abspath(git, path)
      Assert Equals(ret, Path.realpath(Path.abspath(path)))
    End

    It returns {path} if the {path} is already an absolute path in a git repository
      let path = Path.realpath(Path.abspath(expand('%')))
      let git = gita#core#get()
      let ret = gita#normalize#abspath(git, path)
      Assert Equals(ret, path)
      Assert Same(ret, path)
    End

    It returns {path} if the {path} is already an absolute path in a current working directory
      let path = Path.realpath(Path.abspath(expand('%')))
      let git = { 'is_enabled': 0, 'worktree': '' }
      let ret = gita#normalize#abspath(git, path)
      Assert Equals(ret, path)
      Assert Same(ret, path)
    End
  End

  Describe gita#normalize#commit({git}, {commit})
    It returns a revision of a common ancestor of A...B
      if exists('$APPVEYOR') || exists('$TRAVIS')
        Skip CIs checkout a repository with --depth=1 so skip
      else
        let alpha2 = '2d2b3bd'
        let alpha3 = '31e3c64'
        let ancestor = '2d2b3bd2182391f0de6170880905b361757de067'
        let commit = alpha2 . '...' . alpha3
        let git = gita#core#get_or_fail()
        let ret = gita#normalize#commit(git, commit)
        Assert Equals(ret, ancestor)
      endif
    End

    It returns A of A..B
      let alpha2 = '2d2b3bd'
      let alpha3 = '31e3c64'
      let commit = alpha2 . '..' . alpha3
      let git = gita#core#get_or_fail()
      let ret = gita#normalize#commit(git, commit)
      Assert Equals(ret, alpha2)
    End

    It returns A of A
      let alpha3 = '31e3c64'
      let commit = alpha3
      let git = gita#core#get_or_fail()
      let ret = gita#normalize#commit(git, commit)
      Assert Equals(ret, commit)
    End
  End

  Describe gita#normalize#commit_for_diff({git}, {commit})
    It returns <A...B>..B for A...B
      if exists('$APPVEYOR') || exists('$TRAVIS')
        Skip CIs checkout a repository with --depth=1 so skip
      else
        let alpha2 = '2d2b3bd'
        let alpha3 = '31e3c64'
        let ancestor = '2d2b3bd2182391f0de6170880905b361757de067'
        let commit = alpha2 . '...' . alpha3
        let git = gita#core#get_or_fail()
        let ret = gita#normalize#commit_for_diff(git, commit)
        Assert Equals(ret, ancestor . '..' . alpha3)
      endif
    End

    It returns A..B of A..B
      let alpha2 = '2d2b3bd'
      let alpha3 = '31e3c64'
      let commit = alpha2 . '..' . alpha3
      let git = gita#core#get_or_fail()
      let ret = gita#normalize#commit_for_diff(git, commit)
      Assert Equals(ret, commit)
    End

    It returns A of A
      let alpha3 = '31e3c64'
      let commit = alpha3
      let git = gita#core#get_or_fail()
      let ret = gita#normalize#commit(git, commit)
      Assert Equals(ret, commit)
    End
  End
End
