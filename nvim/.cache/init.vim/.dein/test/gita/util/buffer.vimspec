Describe gita#util#buffer
  Describe #parse_cmdarg([{cmdarg}])
    It returns an empty dictionary for non cmdarg
      let ret = gita#util#buffer#parse_cmdarg('')
      Assert Equals(ret, {})
    End
    It parses "++enc=XXX" and return "encoding: XXX" dictionary
      let ret = gita#util#buffer#parse_cmdarg('++enc=utf-8')
      Assert Equals(ret, { 'encoding': 'utf-8' })
    End

    It parses "++ff=XXX" and return "fileformat: XXX" dictionary
      let ret = gita#util#buffer#parse_cmdarg('++ff=dos')
      Assert Equals(ret, { 'fileformat': 'dos' })
    End

    It parses "++bad=XXX" and return "bad: XXX" dictionary
      let ret = gita#util#buffer#parse_cmdarg('++bad=keep')
      Assert Equals(ret, { 'bad': 'keep' })
    End

    It parses "++bin" and return "binary: 1" dictionary
      let ret = gita#util#buffer#parse_cmdarg('++binary')
      Assert Equals(ret, { 'binary': 1 })
    End

    It parses "++nobin" and return "nobinary: 1" dictionary
      let ret = gita#util#buffer#parse_cmdarg('++nobin')
      Assert Equals(ret, { 'nobinary': 1 })
    End

    It parses "++edit" and return "edit: 1" dictionary
      let ret = gita#util#buffer#parse_cmdarg('++edit')
      Assert Equals(ret, { 'edit': 1 })
    End

    It parses multiple opts specification and return a correct dictionary
      let ret = gita#util#buffer#parse_cmdarg(
            \ '++enc=utf-8 ++ff=dos ++bad=keep ++binary ++nobinary ++edit'
            \)
      Assert Equals(ret, {
            \ 'encoding': 'utf-8',
            \ 'fileformat': 'dos',
            \ 'bad': 'keep',
            \ 'binary': 1,
            \ 'nobinary': 1,
            \ 'edit': 1,
            \})
    End
  End
End

