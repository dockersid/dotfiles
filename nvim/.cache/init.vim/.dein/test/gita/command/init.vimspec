Describe gita#command#init
  Before all
    let V = vital#of('vital')
    let String = V.import('Data.String')
    let Path = V.import('System.Filepath')
    let Guard = V.import('Vim.Guard')
    let ScriptLocal = V.import('Vim.ScriptLocal')
    let ProcessMock = V.import('System.Process.Mock')
    " the line below is required to load requirements before :redir
    silent Gita init
  End

  Before
    let sf = ScriptLocal.sfuncs(
          \ Path.realpath('autoload/gita/command/init.vim')
          \)
    let guard = Guard.store([
          \ 'g:gita#process#options',
          \ 'g:gita#command#init#default_options',
          \])
    let g:gita#process#options = {
          \ 'clients': [deepcopy(ProcessMock)],
          \}
  End

  After
    call guard.restore()
  End

  Describe s:args_from_options({git}, {options})
    It returns a {args} List of {options}
      new foobar.txt
      let options = {
            \ 'bare': 1,
            \ 'template': expand('%:p:h'),
            \ 'separate-git-dir': expand('%:p:h'),
            \ 'shared': 'all',
            \ '__unknown__': [
            \   '%',
            \   'a',
            \   'b',
            \ ],
            \}
      let git = gita#core#get_or_fail()
      let ret = sf.args_from_options(git, options)
      Assert Equals(ret, [
            \ 'init',
            \ '--bare',
            \ '--separate-git-dir=' . expand('%:p:h'),
            \ '--shared=all',
            \ '--template=' . expand('%:p:h'),
            \])
    End

    It ignores unknown attributes in {options}
      let options = {
            \ 'foobar': 1,
            \}
      let git = gita#core#get_or_fail()
      let ret = sf.args_from_options(git, options)
      Assert Equals(ret, [
            \ 'init',
            \])
    End
  End

  Describe #execute({git}, {options})
    let prefix = ['init']

    It executes 'init' for options: {}
      let git = gita#core#get()
      let result = gita#command#init#execute(git, {})
      Assert Equals(result.args[-1:], prefix + [])
    End

    It executes 'init --bare' for options: {'bare': 1}
      let git = gita#core#get()
      let result = gita#command#init#execute(git, {'bare': 1})
      Assert Equals(result.args[-2:], prefix + ['--bare'])
    End

    It executes 'init --template=.' for options: {'template': '.'}
      let git = gita#core#get()
      let result = gita#command#init#execute(git, {'template': '.'})
      Assert Equals(result.args[-2:], prefix + ['--template=.'])
    End
  End

  Describe #command({bang}, {range}, {args})
    let prefix = ['init']

    It shows a help and do nothing if -h/--help is specified
      silent let result = gita#command#init#command('', [0, 0], ['-h'])
      Assert Equals(result, {})

      silent let result = gita#command#init#command('', [0, 0], ['--help'])
      Assert Equals(result, {})
    End

    It executes a command with default options
      silent let result = gita#command#init#command('', [0, 0], [])
      Assert Equals(result.args[-1:], prefix)

      let g:gita#command#init#default_options = {
            \ 'bare': 1,
            \ 'shared': 1,
            \}
      silent let result = gita#command#init#command('', [0, 0], [])
      Assert Equals(result.args[-3:], prefix + ['--bare', '--shared'])
    End

    It triggers modified
      augroup vim-gita-temporary
        autocmd! *
        autocmd User GitaStatusModifiedPre let g:GitaStatusModifiedPreCalled = 1
        autocmd User GitaStatusModifiedPost let g:GitaStatusModifiedPostCalled = 1
      augroup END

      let g:GitaStatusModifiedPreCalled = 0
      let g:GitaStatusModifiedPostCalled = 0
      silent let result = gita#command#add#command('', [0, 0], [])
      Assert True(g:GitaStatusModifiedPreCalled)
      Assert True(g:GitaStatusModifiedPostCalled)

      unlet g:GitaStatusModifiedPreCalled
      unlet g:GitaStatusModifiedPostCalled
      augroup vim-gita-temporary
        autocmd! *
      augroup END
    End

    It expire a current git instance binded to the buffer
      let git = gita#core#get()
      Assert False(get(git, 'is_expired'))

      silent let result = gita#command#init#command('', [0, 0], [])
      Assert True(git.is_expired)
    End
  End
End

