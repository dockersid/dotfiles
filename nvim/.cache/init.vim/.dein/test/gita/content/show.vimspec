Describe gita#content#show
  Before all
    let V = vital#of('vital')
    let Prelude = V.import('Prelude')
    let Path = V.import('System.Filepath')
    let Guard = V.import('Vim.Guard')
    let ScriptLocal = V.import('Vim.ScriptLocal')
    let ProcessMock = V.import('System.Process.Mock')
  End

  Before
    let sf = ScriptLocal.sfuncs(
          \ Path.realpath('autoload/gita/content/show.vim')
          \)
    let guard = Guard.store(['g:gita#process#options'])
    let mock = deepcopy(ProcessMock)
    let g:gita#process#options = {
          \ 'clients': [mock],
          \}
  End

  After
    call guard.restore()
  End

  Describe s:replace_filenames_in_diff({content}, {filename1}, {filename2}, {repl})
    Context substitute test
      It is possible to substitute C:\Windows\Test.txt
        let text = 'AAA C:\Windows\Test.txt BBB'
        Assert Equals(
              \ substitute(text, 'C:\\Windows\\Test\.txt', 'FOOBAR', 'g'),
              \ 'AAA FOOBAR BBB',
              \)

        let text = 'AAA C:\\Windows\\Test.txt BBB'
        Assert Equals(
              \ substitute(text, 'C:\\\\Windows\\\\Test\.txt', 'FOOBAR', 'g'),
              \ 'AAA FOOBAR BBB',
              \)
      End
    End

    It replace {filename1} and {filename2} in the header of {content} into {repl}
      let tempfile = tempname()
      let filename1 = tempfile . '.index'
      let filename2 = tempfile . '.buffer'
      let content = [
            \ printf('diff --git a%s b%s',
            \   (filename1 =~# '^/' ? '' : '/') . filename1,
            \   (filename2 =~# '^/' ? '' : '/') . filename2,
            \ ),
            \ 'index ZZZZZZZZZZ..ZZZZZZZZZZ ZZZZZZZZZZ',
            \ printf('--- a%s',
            \   (filename1 =~# '^/' ? '' : '/') . filename1,
            \ ),
            \ printf('+++ b%s',
            \   (filename2 =~# '^/' ? '' : '/') . filename2,
            \ ),
            \ ' brabrabra',
            \]
      if Prelude.is_windows()
        " NOTE:
        " All '\' characters in content generated from 'git diff' are escaped in Windows
        " https://github.com/lambdalisue/gita/pull/85#issuecomment-183611682
        call map(content, 'escape(v:val, "\\")')
      endif
      let repl = 'autoload/gita.vim'
      let result = sf.replace_filenames_in_diff(content, filename1, filename2, repl)
      Assert Equals(result, [
            \ 'diff --git a/autoload/gita.vim b/autoload/gita.vim', 
            \ 'index ZZZZZZZZZZ..ZZZZZZZZZZ ZZZZZZZZZZ',
            \ '--- a/autoload/gita.vim',
            \ '+++ b/autoload/gita.vim',
            \ ' brabrabra',
            \])
    End

    It solves https://ci.appveyor.com/project/lambdalisue/gita/build/306
      let content = [
            \ 'diff --git a/C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\VIUAF40.tmp.index b/C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\VIUAF40.tmp.buffer',
            \ 'index ZZZZZZZZZZ..ZZZZZZZZZZ ZZZZZZZZZZ',
            \ '--- a/C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\VIUAF40.tmp.index',
            \ '+++ b/C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\VIUAF40.tmp.buffer',
            \ ' brabrabra'
            \]
      let tempfile = 'C:\Users\appveyor\AppData\Local\Temp\1\VIUAF40.tmp'
      let filename1 = tempfile . '.index'
      let filename2 = tempfile . '.buffer'
      let repl = 'autoload/gita.vim'
      let result = sf.replace_filenames_in_diff(content, filename1, filename2, repl, 1)
      Assert Equals(result, [
            \ 'diff --git a/autoload/gita.vim b/autoload/gita.vim', 
            \ 'index ZZZZZZZZZZ..ZZZZZZZZZZ ZZZZZZZZZZ',
            \ '--- a/autoload/gita.vim',
            \ '+++ b/autoload/gita.vim',
            \ ' brabrabra',
            \])
    End
  End

  Describe s:get_diff_content({git}, {content}, {filename})
    It returns a diff content between a {content} and a content of {filename} in the index
      function! mock.execute(args, options) abort
        let cmdline = join(a:args)
        if cmdline =~# '^git .* show'
          Assert Match(cmdline, '^git .* show :foobar.txt$')
          return {
                \ 'status': 0,
                \ 'output': "A\nB\nC",
                \}
        else
          Assert Match(cmdline, '^git .* diff --no-index --unified=1 -- .* .*$')
          return {
                \ 'status': 0,
                \ 'output': "A\nB\nC\nD\n",
                \}
        endif
      endfunction
      let git = gita#core#get()
      Assert Equals(
            \ sf.get_diff_content(git, ['A', 'BBB', 'C'], 'foobar.txt'),
            \ ['A', 'B', 'C', 'D'],
            \)
    End

    It returns a diff content even no content of {filename} found in the index
      function! mock.execute(args, options) abort
        let cmdline = join(a:args)
        if cmdline =~# '^git .* show'
          Assert Match(cmdline, '^git .* show :foobar.txt$')
          return {
                \ 'status': 128,
                \ 'output': 'fatal: Path ''foobar.txt'' does not exist',
                \}
        else
          Assert Match(cmdline, '^git .* diff --no-index --unified=1 -- .* .*$')
          return {
                \ 'status': 0,
                \ 'output': "A\nB\nC\nD\n",
                \}
        endif
      endfunction
      let git = gita#core#get()
      Assert Equals(
            \ sf.get_diff_content(git, ['A', 'BBB', 'C'], 'foobar.txt'),
            \ ['A', 'B', 'C', 'D'],
            \)
    End

    It throw an exception to tell there is no difference if the number of line of the diff content is less than 4
      function! mock.execute(args, options) abort
        let cmdline = join(a:args)
        if cmdline =~# '^git .* show'
          Assert Match(cmdline, '^git .* show :foobar.txt$')
          return {
                \ 'status': 128,
                \ 'output': 'fatal: Path ''foobar.txt'' does not exist',
                \}
        else
          Assert Match(cmdline, '^git .* diff --no-index --unified=1 -- .* .*$')
          return {
                \ 'status': 0,
                \ 'output': "",
                \}
        endif
      endfunction
      let git = gita#core#get()
      Throws /No differences are detected/ sf.get_diff_content(git, ['A', 'B', 'C'], 'foobar.txt')
    End
  End

  Describe s:build_bufname({options})
    It builds a buffer name from {options}
      " TODO: Test
    End
  End
End
