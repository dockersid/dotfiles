Describe gita#process
  Before all
    let V = vital#of('vital')
    let Path = V.import('System.Filepath')
    let ScriptLocal = V.import('Vim.ScriptLocal')
  End

  Before
    let sf = ScriptLocal.sfuncs(Path.realpath('autoload/gita/process.vim'))
  End

  Describe s:translate({key}, {options}, {scheme})
    It returns ['-X'] for ('X', { 'X': 1 }, '')
      let ret = sf.translate('X', { 'X': 1 }, '')
      Assert Equals(ret, ['-X'])
    End

    It returns ['--KEY'] for ('KEY', { 'KEY': 1 }, '')
      let ret = sf.translate('KEY', { 'KEY': 1 }, '')
      Assert Equals(ret, ['--KEY'])
    End

    It returns ['KEY'] for ('KEY', { 'KEY': 'VALUE' }, '%k')
      let ret = sf.translate('KEY', { 'KEY': 'VALUE' }, '%k')
      Assert Equals(ret, ['KEY'])
    End

    It returns ['VALUE'] for ('KEY', { 'KEY': 'VALUE' }, '%v')
      let ret = sf.translate('KEY', { 'KEY': 'VALUE' }, '%v')
      Assert Equals(ret, ['VALUE'])
    End

    It returns ['--KEY=VALUE'] for ('KEY', { 'KEY': 'VALUE' }, '--%k=%v')
      let ret = sf.translate('KEY', { 'KEY': 'VALUE' }, '--%k=%v')
      Assert Equals(ret, ['--KEY=VALUE'])
    End

    It returns ['--KEY=V A L U E'] for ('KEY', { 'KEY': 'V A L U E' }, '--%k=%v')
      let ret = sf.translate('KEY', { 'KEY': 'V A L U E' }, '--%k=%v')
      Assert Equals(ret, ['--KEY=V A L U E'])
    End

    It returns ['--KEY', 'VALUE'] for ('KEY', { 'KEY': 'VALUE' }, '--%k %v')
      let ret = sf.translate('KEY', { 'KEY': 'VALUE' }, '--%k %v')
      Assert Equals(ret, ['--KEY', 'VALUE'])
    End

    It returns ['--KEY', 'V A L U E'] for ('KEY', { 'KEY': 'V A L U E' }, '--%k %v')
      let ret = sf.translate('KEY', { 'KEY': 'V A L U E' }, '--%k %v')
      Assert Equals(ret, ['--KEY', 'V A L U E'])
    End

    It returns ['-Xv1', '-Xv2', '-Xv3'] for ('X', { 'X': ['v1', 'v2', 'v3'] }, '-%k%v')
      let ret = sf.translate('X', { 'X': ['v1', 'v2', 'v3'] }, '-%k%v')
      Assert Equals(ret, ['-Xv1', '-Xv2', '-Xv3'])
    End
  End

  Describe s:strip_quotes({value})
    It strips leading and trailing single quotes
      Assert Equals(sf.strip_quotes("'foo'"), 'foo')
      Assert Equals(sf.strip_quotes("'foo bar'"), 'foo bar')
    End

    It strips leading and trailing double quotes
      Assert Equals(sf.strip_quotes('"foo"'), 'foo')
      Assert Equals(sf.strip_quotes('"foo bar"'), 'foo bar')
    End

    It strips leading and trailing single quotes of -k='value' or --key='value'
      Assert Equals(sf.strip_quotes("-k='foo'"), '-k=foo')
      Assert Equals(sf.strip_quotes("-k='foo bar'"), '-k=foo bar')
      Assert Equals(sf.strip_quotes("--key='foo'"), '--key=foo')
      Assert Equals(sf.strip_quotes("--key='foo bar'"), '--key=foo bar')
    End

    It strips leading and trailing double quotes of -k="value" or --key="value"
      Assert Equals(sf.strip_quotes('-k="foo"'), '-k=foo')
      Assert Equals(sf.strip_quotes('-k="foo bar"'), '-k=foo bar')
      Assert Equals(sf.strip_quotes('--key="foo"'), '--key=foo')
      Assert Equals(sf.strip_quotes('--key="foo bar"'), '--key=foo bar')
    End
  End

  Describe #args_from_options({options}, {schemes})
    It returns an argument list from {options} and {schemes}
      let options = {
            \ 'foo': 0,
            \ 'bar': 1,
            \ 'hoge': 'hoge',
            \ 'piyo': ['p', 'i', 'y', 'o'],
            \}
      let schemes = {
            \ 'foo': 1,
            \ 'bar': 1,
            \ 'hoge': 1,
            \ 'piyo': 1,
            \}
      let ret = gita#process#args_from_options(options, schemes)
      Assert Equals(sort(ret), sort([
            \ '--bar',
            \ '--hoge=hoge',
            \ '--piyo=p',
            \ '--piyo=i',
            \ '--piyo=y',
            \ '--piyo=o',
            \]))
    End

    It follows translation rule written in {schemes}
      let options = {
            \ 'foo': 'foo',
            \ 'bar': 'bar',
            \ 'hoge': 'hoge',
            \}
      let schemes = {
            \ 'foo': '%k',
            \ 'bar': '%v',
            \ 'hoge': '--%k %v',
            \}
      let ret = gita#process#args_from_options(options, schemes)
      Assert Equals(sort(ret), sort([
            \ 'foo',
            \ 'bar',
            \ '--hoge',
            \ 'hoge',
            \]))
    End

    It ignores attributes in {options} which does not exist in {schemes}
      let options = {
            \ 'foo': 0,
            \ 'bar': 1,
            \ 'hoge': 'hoge',
            \ 'piyo': ['p', 'i', 'y', 'o'],
            \}
      let schemes = {
            \ 'foo': 1,
            \}
      let ret = gita#process#args_from_options(options, schemes)
      Assert Equals(ret, [])
    End
  End

  Describe #splitargs({args})
    It splits a String {args} into a List by whitespaces
      let ret = gita#process#splitargs('A B C')
      Assert Equals(ret, ['A', 'B', 'C'])
    End

    It does not split a String {args} into a List if value is enclosed by single quotes
      let ret = gita#process#splitargs('A ''B C'' D')
      Assert Equals(ret, ['A', 'B C', 'D'])
    End

    It does not split a String {args} into a List if value is enclosed by double quotes
      let ret = gita#process#splitargs('A "B C" D')
      Assert Equals(ret, ['A', 'B C', 'D'])
    End

    It does not split a String {args} into a List if whitespace is escaped
      let ret = gita#process#splitargs('A B\ C D')
      Assert Equals(ret, ['A', 'B C', 'D'])
    End

    It remove single quotes from "--key='v a l u e'" and return "--key=v a l u e"
      let ret = gita#process#splitargs('--key=''v a l u e''')
      Assert Equals(ret, ['--key=v a l u e'])
    End

    It remove double quotes from '--key="v a l u e"' and return '--key=v a l u e'
      let ret = gita#process#splitargs('--key="v a l u e"')
      Assert Equals(ret, ['--key=v a l u e'])
    End

    It unescape escaped whitespace from '--key=v\ a\ l\ u\ e' and return '--key=v a l u e'
      let ret = gita#process#splitargs('--key=v\ a\ l\ u\ e')
      Assert Equals(ret, ['--key=v a l u e'])
    End
  End

  Describe #execute({git}, {args}[, {options}])
    It executes a {args} and return stdout content
      let git = gita#core#get_or_fail()
      let result = gita#process#execute(
            \ git,
            \ ['rev-parse', '--is-inside-work-tree']
            \)
      Assert Equals(result.content, ['true'])
    End

    It throw an exception when the command exit with error
      let git = gita#core#get_or_fail()
      Throws /vital: Git\.Process: Fail:/ gita#process#execute(git, ['A'])
    End

    It does not throw any exception even when the command exit with error if fail_silently is specified
      let git = gita#core#get_or_fail()
      call gita#process#execute(git, ['A'], { 'fail_silently': 1 })
    End

    It echos stdout content
      let git = { 'worktree': '' }
      redir => content
        silent! call gita#process#execute(
              \ git,
              \ ['rev-parse', '--is-inside-work-tree']
              \)
      redir END
      Assert Equals(split(content, "\n"), [
            \ 'OK: git -c color.ui=false --no-pager rev-parse --is-inside-work-tree',
            \ 'true',
            \])
    End

    It does not echo stdout content when quiet is specified
      let git = { 'worktree': '' }
      redir => content
        silent! call gita#process#execute(
              \ git,
              \ ['rev-parse', '--is-inside-work-tree'],
              \ { 'quiet': 1 }
              \)
      redir END
      Assert Equals(split(content, "\n"), [])
    End
  End
End

